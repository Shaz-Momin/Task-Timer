{"version":3,"sources":["CurrentTask.js","App.js","serviceWorker.js","index.js"],"names":["CurrentTask","props","state","hours","Math","floor","timeLeft","minutes","seconds","task","this","alerted","myInterval","setInterval","setState","clearInterval","className","onClick","handleSubmit","alert","currentTask","addToCompleted","React","Component","App","submitted","completed","currentlyWorkingOn","bind","handleTaskChange","handleTimeChange","e","completedTask","text","key","Date","now","concat","console","log","preventDefault","target","name","value","document","getElementById","reset","map","title","style","display","id","type","placeholder","onChange","min","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f188731c.chunk.js","sourcesContent":["import React from 'react'\n\nclass CurrentTask extends React.Component{\n\n    constructor(props) {\n        super(props)\n        this.state = { \n            hours: Math.floor(props.timeLeft / 60), \n            minutes: props.timeLeft % 60, \n            seconds: 0, \n            task: props.task\n        }\n    }\n\n    componentDidMount() {\n        this.state.alerted = false;\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes, hours} = this.state\n\n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    if (hours === 0) {\n                        clearInterval(this.myInterval)\n                    } else {\n                        this.setState(({ hours }) => ({\n                            hours: hours - 1,\n                            minutes: 60,\n                            seconds: 0\n                        }))\n                    }\n                } else {\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n            } \n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n\n    render () {\n        const { hours, minutes, seconds, task } = this.state\n\n        let currentTask = (hours, minutes, seconds, task) => {\n\n            if (minutes === 0 && seconds === 0 && hours === 0 ) {\n                return (\n                    <div className=\"timeDisplay\">00:00{alert(\"Time's Up for the following task: \" + task)}</div>\n                )\n            } else {\n                if (hours !== 0) {\n                    return (\n                        <div className=\"timeDisplay\">{hours}:{minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}</div>\n                    )\n                } else {\n                    return (\n                        <div className=\"timeDisplay\">{minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}</div>\n                    )\n                }\n            }\n        }\n\n        return (\n           <div className=\"CurrentTask\">\n                <div className=\"closeBtn\" onClick={this.props.handleSubmit}>&#10006;</div>                \n                <div>{currentTask(hours, minutes, seconds, task)}</div>\n                <h3 className=\"taskDisplay\">{task}</h3>\n            <p className=\"blurb\">Let's focus on this task</p>\n                <button onClick={this.props.addToCompleted}>Mark as Complete</button>\n            </div> \n        )\n    }\n}\n\nexport default CurrentTask","import React from 'react'\nimport './App.css'\nimport CurrentTask from './CurrentTask'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\", timeLeft: 0, submitted: false, completed: [], currentlyWorkingOn: \"\"};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleTaskChange = this.handleTaskChange.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.addToCompleted = this.addToCompleted.bind(this);\n  }\n\n  addToCompleted(e) {\n    const completedTask = {\n      text: this.state.currentlyWorkingOn,\n      key: Date.now()\n    }\n    this.state.completed = this.state.completed.concat(completedTask);\n    console.log(this.state.completed)\n\n    this.handleSubmit(e);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    \n    this.setState({\n      [e.target.name]: e.target.value,\n      key: Date.now()\n    });\n\n    // Clear inputs\n    this.state.currentlyWorkingOn = this.state.task;\n    let form = document.getElementById('mainForm');\n    form.reset();\n\n    this.state.submitted = !this.state.submitted;\n    //console.log(this.state);\n  }\n\n  handleTaskChange(e) {\n    this.state.task = e.target.value;\n  }\n\n  handleTimeChange(e) {\n    this.state.timeLeft = e.target.value;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"sidebar\">\n          {this.state.completed.map( (task) => {\n            return (\n              <div title={task.text} className=\"completionIcon\">&#10004;</div>\n            )\n          })}\n        </div>\n        <header style = {{ display: this.state.submitted ? \"none\" : \"block\"}}>\n          <h2>Task Timer</h2>\n          <form id=\"mainForm\">\n              <input \n                className=\"text\"\n                type=\"text\" \n                name=\"task\" \n                placeholder=\"Task description\"\n                onChange={this.handleTaskChange}>\n              </input>\n              <input \n                className=\"num\"\n                type=\"number\" \n                name=\"timeLeft\" \n                min=\"1\" \n                placeholder=\"mins?\"\n                onChange={this.handleTimeChange}>\n              </input>\n            <button type=\"submit\" onClick={this.handleSubmit}>Start Task</button>\n          </form> \n        </header>\n        {this.state.submitted ?\n          <CurrentTask \n            task={this.state.task} \n            timeLeft={this.state.timeLeft}\n            key={this.state.key}\n            handleSubmit={this.handleSubmit}\n            addToCompleted={this.addToCompleted}/>\n        :\n          <h4>Let's get some work done</h4> \n        }\n      </div>\n    )\n  } \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}